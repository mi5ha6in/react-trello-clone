{"version":3,"sources":["styles.ts","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","utils/arrayUtils.ts","state/AppStateReducer.ts","state/AppStateContext.tsx","Card.tsx","state/actions.ts","utils/isHidden.ts","Column.tsx","utils/useItemDrag.ts","CustomDragLayer.tsx","App.tsx","index.tsx"],"names":["DragPreviewContainer","styled","div","props","isPreview","undefined","isHidden","AppContainer","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","CustomDragLayerContainer","DragPreviewWrapper","attrs","position","x","y","style","transform","NewItemForm","onAdd","useState","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onKeyPress","event","key","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","findItemIndexById","items","id","findIndex","item","moveItem","array","from","to","index","slice","insertItemAtIndex","removeItemAtIndex","appStateReducer","draft","action","type","lists","push","nanoid","payload","tasks","listId","targetListIndex","draggedId","hoverId","dragIndex","hoverIndex","draggedItem","appData","AppStateContext","createContext","AppStateProvider","children","useImmerReducer","state","dispatch","Provider","getTasksByListId","find","list","useAppState","useContext","Card","setDraggedItem","itemType","Boolean","Column","useDrop","accept","hover","drop","useDrag","end","drag","preview","getEmptyImage","captureDraggingState","useItemDrag","map","task","addTask","CustomDragLayer","currentOffset","useDragLayer","monitor","getSourceClientOffset","App","addList","ReactDOM","render","StrictMode","DndProvider","backend","Backend","document","getElementById"],"mappings":"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","file":"static/js/main.7e461dd7.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\ninterface DragPreviewContainerProps {\n  isHidden?: boolean\n  isPreview?: boolean\n}\n\nexport const DragPreviewContainer = styled.div<DragPreviewContainerProps>`\n  transform: ${props => (props.isPreview ? \"rotate(5deg)\" : undefined)};\n  opacity: ${props => props.isHidden ? 0 : 1};\n`\n\n\nexport const AppContainer = styled.div`\n  align-items: flex-start;\n  background-color: #3179ba;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  padding: 20px;\n  width: 100%;\n`\n\nexport const ColumnContainer = styled(DragPreviewContainer)`\n  background-color: #ebecf0;\n  width: 300px;\n  min-height: 40px;\n  margin-right: 20px;\n  background-repeat: 3px;\n  padding: 8px;\n  flex-grow: 0;\n`\n\nexport const ColumnTitle = styled.div`\n  padding: 6px 16px 12px;\n  font-weight: bold;\n`\nexport const CardContainer = styled(DragPreviewContainer)`\n  background-color: #ffffff;\n  cursor: pointer;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  max-width: 300px;\n  border-radius: 3px;\n  box-shadow: #091e4240 0px 1px 0px 0px;\n`\n\ntype AddItemButtonProps = {\n  dark?: boolean\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n  background-color: #ffffff3d;\n  border-radius: 3px;\n  border: none;\n  color: ${props => (props.dark ? \"#000\" : \"#fff\")};\n  cursor: pointer;\n  max-width: 300px;\n  padding: 10px 12px;\n  text-align: left;\n  transition: background 85ms ease-in;\n  width: 100%;\n  &:hover {\n    background-color: #ffffff52;\n  }\n`\n\nexport const NewItemFormContainer = styled.div`\n  max-width: 300px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: flex-start;\n`\nexport const NewItemButton = styled.button`\n  background-color: #5aac44;\n  border-radius: 3px;\n  border: none;\n  box-shadow: none;\n  color: #fff;\n  padding: 6px 12px;\n  text-align: center;\n`\nexport const NewItemInput = styled.input`\n  border-radius: 3px;\n  border: none;\n  box-shadow: #091e4240 0px 1px 0px 0px; margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  width: 100%;\n`\n\nexport const CustomDragLayerContainer = styled.div`\n  height: 100%;\n  left: 0;\n  pointer-events: none;\n  position: fixed;\n  top: 0;\n  width: 100%;\n  z-index: 100;\n`\ntype DragPreviewWrapperProps = {\n  position: {\n    x: number\n    y: number\n  }\n}\n\nexport const DragPreviewWrapper = styled.div.attrs<DragPreviewWrapperProps>(\n  ({ position: { x, y } }) => ({\n    style: {\n      transform: `translate(${x}px, ${y}px)`\n    }\n  })\n)<DragPreviewWrapperProps>``\n\n","import { useState } from \"react\"\nimport { NewItemFormContainer, NewItemButton, NewItemInput } from \"./styles\"\nimport { useFocus } from \"./utils/useFocus\"\n\ntype NewItemFormProps = {\n  onAdd(text: string): void\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n  const [text, setText] = useState(\"\")\n  const inputRef = useFocus()\n  const handleAddText = (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (event.key === \"Enter\") {\n      onAdd(text)\n    }\n  }\n\n  return (\n    <NewItemFormContainer>\n      <NewItemInput\n        ref={inputRef}\n        value={text}\n        onChange={e => setText(e.target.value)}\n        onKeyPress={handleAddText}\n      />\n      <NewItemButton onClick={() => onAdd(text)}>\n        Create\n      </NewItemButton>\n    </NewItemFormContainer>\n  )\n}\n","import { useRef, useEffect } from 'react'\n\nexport const useFocus = () => {\n  const ref = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    ref.current?.focus()\n  }, [])\n\n  return ref\n}\n","import { useState } from \"react\"\nimport { AddItemButton } from \"./styles\"\nimport { NewItemForm } from \"./NewItemForm\"\n\ntype AddNewItemProps = {\n  onAdd(text: string): void\n  toggleButtonText: string\n  dark?: boolean\n}\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n  const [showForm, setShowForm] = useState(false);\n  const { onAdd, toggleButtonText, dark } = props;\n\n  if (showForm) {\n    return (\n      <NewItemForm\n        onAdd={text => {\n          onAdd(text)\n          setShowForm(false)\n        }}\n      />\n    )\n  }\n\n  return (\n    <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n      {toggleButtonText}\n    </AddItemButton>\n  )\n}\n","type Item = {\n  id: string\n}\n\nexport const findItemIndexById = <TItem extends Item>(\n  items: TItem[],\n  id: string\n) => {\n  return items.findIndex((item: TItem) => item.id === id)\n}\n\nexport const moveItem = <TItem>(array: TItem[], from: number, to: number) => {\n  const item = array[from]\n  return insertItemAtIndex(removeItemAtIndex(array, from), item, to)\n}\n\nexport function removeItemAtIndex<TItem>(array: TItem[], index: number) {\n  return [...array.slice(0, index), ...array.slice(index + 1)]\n}\n\nexport function insertItemAtIndex<TItem>(\n  array: TItem[],\n  item: TItem,\n  index: number\n) {\n  return [...array.slice(0, index), item, ...array.slice(index)]\n}\n","import { Action } from \"./actions\"\nimport { nanoid } from \"nanoid\"\nimport { findItemIndexById, moveItem } from \"../utils/arrayUtils\"\nimport { DragItem } from \"../DragItem\"\n\nexport type Task = {\n  id: string\n  text: string\n}\n\nexport type List = {\n  id: string\n  text: string\n  tasks: Task[]\n}\n\nexport type AppState = {\n  lists: List[]\n  draggedItem: DragItem | null\n}\n\nexport const appStateReducer = (draft: AppState, action: Action): AppState | void => {\n  switch (action.type) {\n    case \"ADD_LIST\": {\n      draft.lists.push({\n        id: nanoid(),\n        text: action.payload,\n        tasks: []\n      })\n      break\n    }\n    case \"ADD_TASK\": {\n      const { text, listId } = action.payload\n      const targetListIndex = findItemIndexById(draft.lists, listId)\n\n      draft.lists[targetListIndex].tasks.push({\n        id: nanoid(),\n        text\n      })\n      break\n    }\n    case \"MOVE_LIST\": {\n      const { draggedId, hoverId } = action.payload\n      const dragIndex = findItemIndexById(draft.lists, draggedId)\n      const hoverIndex = findItemIndexById(draft.lists, hoverId)\n      draft.lists = moveItem(draft.lists, dragIndex, hoverIndex)\n      break\n    }\n    case \"SET_DRAGGED_ITEM\": {\n      draft.draggedItem = action.payload\n      break\n    }\n    default: {\n      break\n    }\n  }\n}\n","import { createContext, useContext, Dispatch, FC } from \"react\"\nimport { appStateReducer, AppState, List, Task } from \"./AppStateReducer\"\nimport { Action } from \"./actions\"\nimport { useImmerReducer } from \"use-immer\"\nimport { DragItem } from \"../DragItem\"\n\ntype AppStateContextProps = {\n  draggedItem: DragItem | null\n  lists: List[]\n  getTasksByListId(id: string): Task[]\n  dispatch: Dispatch<Action>\n}\n\nconst appData: AppState = {\n  lists: [\n    {\n      id: \"0\",\n      text: \"To Do\",\n      tasks: [{ id: \"c0\", text: \"Generate app scafolding\" }]\n    },\n    {\n      id: \"1\",\n      text: \"In Progress\",\n      tasks: [{ id: \"c1\", text: \"Learn Typescript\" }]\n    },\n    {\n      id: \"2\",\n      text: \"Done\",\n      tasks: [{ id: \"c2\", text: \"Begin to use static typing\" }]\n    }\n  ],\n  draggedItem: null\n}\n\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\nexport const AppStateProvider: FC = ({ children }) => {\n  const [state, dispatch] = useImmerReducer(appStateReducer, appData)\n\n  const { draggedItem, lists } = state\n  const getTasksByListId = (id: string) => {\n    return lists.find((list) => list.id === id)?.tasks || []\n  }\n\n  return (\n    <AppStateContext.Provider value={{ draggedItem, lists, getTasksByListId, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  )\n}\n\nexport const useAppState = () => {\n  return useContext(AppStateContext)\n}","import { CardContainer } from \"./styles\"\n\ntype CardProps = {\n  text: string\n  id: string\n}\n\nexport const Card = ({ text }: CardProps) => {\n  return <CardContainer>{text}</CardContainer>\n}","import { DragItem } from \"../DragItem\"\n\nexport type Action =\n  | {\n    type: \"ADD_LIST\"\n    payload: string\n  }\n  | {\n    type: \"ADD_TASK\"\n    payload: { text: string; listId: string }\n  }\n  | {\n    type: \"MOVE_LIST\"\n    payload: { draggedId: string; hoverId: string }\n  }\n  | {\n    type: \"SET_DRAGGED_ITEM\"\n    payload: DragItem | null\n  }\n\nexport const addTask = (text: string, listId: string,): Action => ({\n  type: \"ADD_TASK\", payload: { text, listId }\n})\n\nexport const addList = (text: string): Action => ({ type: \"ADD_LIST\", payload: text })\n\nexport const moveList = (draggedId: string, hoverId: string): Action => (\n  {\n    type: \"MOVE_LIST\",\n    payload: {\n      draggedId,\n      hoverId\n    }\n  }\n)\n\nexport const setDraggedItem = (\n  draggedItem: DragItem | null\n): Action => ({ type: \"SET_DRAGGED_ITEM\", payload: draggedItem })\n","import { DragItem } from \"../DragItem\"\n\nexport const isHidden = (\n  draggedItem: DragItem | null,\n  itemType: string,\n  id: string,\n  isPreview?: boolean\n): boolean => {\n  return Boolean(\n    !isPreview &&\n    draggedItem &&\n    draggedItem.type === itemType &&\n    draggedItem.id === id\n  )\n}","import { ColumnContainer, ColumnTitle } from \"./styles\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useAppState } from \"./state/AppStateContext\"\nimport { Card } from \"./Card\"\nimport { moveList, addTask } from \"./state/actions\"\nimport { useRef } from \"react\"\nimport { useItemDrag } from \"./utils/useItemDrag\"\nimport { useDrop } from \"react-dnd\"\nimport { isHidden } from \"./utils/isHidden\"\n\ntype ColumnProps = {\n  text: string\n  id: string\n  isPreview?: boolean\n}\n\nexport const Column = ({ text, id, isPreview }: ColumnProps) => {\n  const { draggedItem, getTasksByListId, dispatch } = useAppState()\n\n  const tasks = getTasksByListId(id)\n  const ref = useRef<HTMLDivElement>(null)\n\n  const [, drop] = useDrop({\n    accept: \"COLUMN\",\n    hover() {\n      if (!draggedItem) {\n        return\n      }\n      if (draggedItem.type === \"COLUMN\") {\n        if (draggedItem.id === id) {\n          return\n        }\n\n        dispatch(moveList(draggedItem.id, id))\n      }\n    }\n  })\n\n  const { drag } = useItemDrag({ type: 'COLUMN', id, text })\n\n  drag(drop(ref))\n\n  return (\n    <ColumnContainer isPreview={isPreview} ref={ref} isHidden={isHidden(draggedItem, \"COLUMN\", id, isPreview)}>\n      <ColumnTitle>{text}</ColumnTitle>\n      {tasks.map(task => (\n        <Card text={task.text} key={task.id} id={task.id} />\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another task\"\n        onAdd={text => dispatch(addTask(text, id))}\n        dark\n      />\n    </ColumnContainer>\n  )\n}\n","import { useDrag } from \"react-dnd\"\nimport {getEmptyImage} from \"react-dnd-html5-backend\"\nimport { useEffect } from \"react\"\nimport { useAppState } from \"../state/AppStateContext\"\nimport { DragItem } from \"../DragItem\"\nimport { setDraggedItem } from \"../state/actions\"\n\nexport const useItemDrag = (item: DragItem) => {\n  const { dispatch } = useAppState()\n  const [, drag, preview] = useDrag({\n    type: item.type,\n    item: () => {\n      dispatch(setDraggedItem(item))\n      return item\n    },\n    end: () => dispatch(setDraggedItem(null))\n  })\n  useEffect(() => {\n    preview(getEmptyImage(), {captureDraggingState: true})\n  }, [preview])\n  return { drag }\n}\n","import { useDragLayer } from \"react-dnd\"\nimport { Column } from \"./Column\"\nimport { CustomDragLayerContainer, DragPreviewWrapper } from \"./styles\"\nimport { useAppState } from \"./state/AppStateContext\"\n\nexport const CustomDragLayer = () => {\n  const { draggedItem } = useAppState()\n  const { currentOffset } = useDragLayer((monitor) => ({\n    currentOffset: monitor.getSourceClientOffset()\n  }))\n\n  return draggedItem && currentOffset ? (\n    <CustomDragLayerContainer>\n      <DragPreviewWrapper position={currentOffset}>\n        <Column\n          id={draggedItem.id}\n          text={draggedItem.text}\n          isPreview\n        />\n      </DragPreviewWrapper>\n    </CustomDragLayerContainer>\n  ) : null\n}\n","import { AppContainer } from \"./styles\"\nimport { Column } from \"./Column\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useAppState } from \"./state/AppStateContext\"\nimport { addList } from \"./state/actions\"\nimport { CustomDragLayer } from \"./CustomDragLayer\"\n\n\nexport const App = () => {\n  const { lists, dispatch } = useAppState()\n  return (\n    <AppContainer>\n      <CustomDragLayer/>\n      {lists.map((list) => (\n        <Column text={list.text} key={list.id} id={list.id} />\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another list\"\n        onAdd={text => dispatch(addList(text))}\n      />\n    </AppContainer>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport { App } from './App'\nimport { DndProvider } from \"react-dnd\"\nimport { HTML5Backend as Backend } from \"react-dnd-html5-backend\"\nimport { AppStateProvider } from \"./state/AppStateContext\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={Backend}>\n      <AppStateProvider>\n        <App />\n      </AppStateProvider>\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}