{"version":3,"sources":["styles.ts","NewItemForm.tsx","utils/useFocus.ts","AddNewItem.tsx","state/AppStateReducer.ts","utils/arrayUtils.ts","state/AppStateContext.tsx","Card.tsx","Column.tsx","state/actions.ts","App.tsx","index.tsx"],"names":["AppContainer","styled","div","ColumnContainer","ColumnTitle","CardContainer","AddItemButton","button","props","dark","NewItemFormContainer","NewItemButton","NewItemInput","input","NewItemForm","onAdd","useState","text","setText","inputRef","ref","useRef","useEffect","current","focus","useFocus","value","onChange","e","target","onKeyPress","event","key","onClick","AddNewItem","showForm","setShowForm","toggleButtonText","appStateReducer","draft","action","type","lists","push","id","nanoid","pyload","tasks","payload","listId","targetListIndex","items","findIndex","item","appData","AppStateContext","createContext","AppStateProvider","children","useImmerReducer","state","dispatch","Provider","getTasksByListId","find","list","useAppState","useContext","Card","Column","map","task","addTask","App","addList","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73c289ae.chunk.js","sourcesContent":["import styled from \"styled-components\"\n\nexport const AppContainer = styled.div`\n  align-items: flex-start;\n  background-color: #3179ba;\n  display: flex;\n  flex-direction: row;\n  height: 100%;\n  padding: 20px;\n  width: 100%;\n`\n\nexport const ColumnContainer = styled.div`\n  background-color: #ebecf0;\n  width: 300px;\n  min-height: 40px;\n  margin-right: 20px;\n  background-repeat: 3px;\n  padding: 8px;\n  flex-grow: 0;\n`\n\nexport const ColumnTitle = styled.div`\n  padding: 6px 16px 12px;\n  font-weight: bold;\n`\nexport const CardContainer = styled.div`\n  background-color: #ffffff;\n  cursor: pointer;\n  margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  max-width: 300px;\n  border-radius: 3px;\n  box-shadow: #091e4240 0px 1px 0px 0px;\n`\n\ntype AddItemButtonProps = {\n  dark?: boolean\n}\n\nexport const AddItemButton = styled.button<AddItemButtonProps>`\n  background-color: #ffffff3d;\n  border-radius: 3px;\n  border: none;\n  color: ${props => (props.dark ? \"#000\" : \"#fff\")};\n  cursor: pointer;\n  max-width: 300px;\n  padding: 10px 12px;\n  text-align: left;\n  transition: background 85ms ease-in;\n  width: 100%;\n  &:hover {\n    background-color: #ffffff52;\n  }\n`\n\nexport const NewItemFormContainer = styled.div`\n  max-width: 300px;\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  align-items: flex-start;\n`\nexport const NewItemButton = styled.button`\n  background-color: #5aac44;\n  border-radius: 3px;\n  border: none;\n  box-shadow: none;\n  color: #fff;\n  padding: 6px 12px;\n  text-align: center;\n`\nexport const NewItemInput = styled.input`\n  border-radius: 3px;\n  border: none;\n  box-shadow: #091e4240 0px 1px 0px 0px; margin-bottom: 0.5rem;\n  padding: 0.5rem 1rem;\n  width: 100%;\n`\n","import { useState } from \"react\"\nimport { NewItemFormContainer, NewItemButton, NewItemInput } from \"./styles\"\nimport { useFocus } from \"./utils/useFocus\"\n\ntype NewItemFormProps = {\n  onAdd(text: string): void\n}\n\nexport const NewItemForm = ({ onAdd }: NewItemFormProps) => {\n  const [text, setText] = useState(\"\")\n  const inputRef = useFocus()\n  const handleAddText = (\n    event: React.KeyboardEvent<HTMLInputElement>\n  ) => {\n    if (event.key === \"Enter\") {\n      onAdd(text)\n    }\n  }\n\n  return (\n    <NewItemFormContainer>\n      <NewItemInput\n        ref={inputRef}\n        value={text}\n        onChange={e => setText(e.target.value)}\n        onKeyPress={handleAddText}\n      />\n      <NewItemButton onClick={() => onAdd(text)}>\n        Create\n      </NewItemButton>\n    </NewItemFormContainer>\n  )\n}\n","import { useRef, useEffect } from 'react'\n\nexport const useFocus = () => {\n  const ref = useRef<HTMLInputElement>(null)\n\n  useEffect(() => {\n    ref.current?.focus()\n  }, [])\n\n  return ref\n}\n","import { useState } from \"react\"\nimport { AddItemButton } from \"./styles\"\nimport { NewItemForm } from \"./NewItemForm\"\n\ntype AddNewItemProps = {\n  onAdd(text: string): void\n  toggleButtonText: string\n  dark?: boolean\n}\n\nexport const AddNewItem = (props: AddNewItemProps) => {\n  const [showForm, setShowForm] = useState(false);\n  const { onAdd, toggleButtonText, dark } = props;\n\n  if (showForm) {\n    return (\n      <NewItemForm\n        onAdd={text => {\n          onAdd(text)\n          setShowForm(false)\n        }}\n      />\n    )\n  }\n\n  return (\n    <AddItemButton dark={dark} onClick={() => setShowForm(true)}>\n      {toggleButtonText}\n    </AddItemButton>\n  )\n}\n","import { Action } from \"./actions\"\nimport { nanoid } from \"nanoid\"\nimport { findItemIndexById } from \"../utils/arrayUtils\"\n\nexport type Task = {\n  id: string\n  text: string\n}\n\nexport type List = {\n  id: string\n  text: string\n  tasks: Task[]\n}\n\nexport type AppState = {\n  lists: List[]\n}\n\nexport const appStateReducer = (draft: AppState, action: Action): AppState | void => {\n  switch (action.type) {\n    case \"ADD_LIST\": {\n      draft.lists.push({\n        id: nanoid(),\n        text: action.pyload,\n        tasks: []\n      })\n      break\n    }\n    case \"ADD_TASK\": {\n      const { text, listId } = action.payload\n      const targetListIndex = findItemIndexById(draft.lists, listId)\n\n      draft.lists[targetListIndex].tasks.push({\n        id: nanoid(),\n        text\n      })\n      break\n    }\n    default: {\n      break\n    }\n  }\n}\n","type Item = {\n  id: string\n}\n\nexport const findItemIndexById = <TItem extends Item>(\n  items: TItem[],\n  id: string\n) => {\n  return items.findIndex((item: TItem) => item.id === id)\n}\n","import { createContext, useContext, Dispatch, FC } from \"react\"\nimport { appStateReducer, AppState, List, Task } from \"./AppStateReducer\"\nimport { Action } from \"./actions\"\nimport { useImmerReducer } from \"use-immer\"\n\ntype AppStateContextProps = {\n  lists: List[]\n  getTasksByListId(id: string): Task[]\n  dispatch: Dispatch<Action>\n}\n\nconst appData: AppState = {\n  lists: [\n    {\n      id: \"0\",\n      text: \"To Do\",\n      tasks: [{ id: \"c0\", text: \"Generate app scafolding\" }]\n    },\n    {\n      id: \"1\",\n      text: \"In Progress\",\n      tasks: [{ id: \"c1\", text: \"Learn Typescript\" }]\n    },\n    {\n      id: \"2\",\n      text: \"Done\",\n      tasks: [{ id: \"c2\", text: \"Begin to use static typing\" }]\n    }\n  ]\n}\n\nconst AppStateContext = createContext<AppStateContextProps>({} as AppStateContextProps)\n\nexport const AppStateProvider: FC = ({ children }) => {\n  const [state, dispatch] = useImmerReducer(appStateReducer, appData)\n\n  const { lists } = state\n  const getTasksByListId = (id: string) => {\n    return lists.find((list) => list.id === id)?.tasks || []\n  }\n\n  return (\n    <AppStateContext.Provider value={{ lists, getTasksByListId, dispatch }}>\n      {children}\n    </AppStateContext.Provider>\n  )\n}\n\nexport const useAppState = () => {\n  return useContext(AppStateContext)\n}","import { CardContainer } from \"./styles\"\n\ntype CardProps = {\n  text: string\n  id: string\n}\n\nexport const Card = ({ text }: CardProps) => {\n  return <CardContainer>{text}</CardContainer>\n}","import { ColumnContainer, ColumnTitle } from \"./styles\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useAppState } from \"./state/AppStateContext\"\nimport { Card } from \"./Card\"\nimport { addTask } from \"./state/actions\"\n\ntype ColumnProps = {\n  text: string\n  id: string\n}\n\nexport const Column = ({ text, id }: ColumnProps) => {\n  const { getTasksByListId, dispatch } = useAppState()\n\n  const tasks = getTasksByListId(id)\n\n  return (\n    <ColumnContainer>\n      <ColumnTitle>{text}</ColumnTitle>\n      {tasks.map(task => (\n        <Card text={task.text} key={task.id} id={task.id} />\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another task\"\n        onAdd={text => dispatch(addTask(text, id))}\n        dark\n      />\n    </ColumnContainer>\n  )\n}\n","export type Action =\n  | {\n    type: \"ADD_LIST\"\n    pyload: string\n  }\n  | {\n    type: \"ADD_TASK\"\n    payload: { text: string; listId: string }\n  }\n\nexport const addTask = (text: string, listId: string,): Action => ({\n  type: \"ADD_TASK\", payload: { text, listId }\n})\n\nexport const addList = (text: string): Action => ({ type: \"ADD_LIST\", pyload: text })","import { AppContainer } from \"./styles\"\nimport { Column } from \"./Column\"\nimport { AddNewItem } from \"./AddNewItem\"\nimport { useAppState } from \"./state/AppStateContext\"\nimport { addList } from \"./state/actions\"\n\n\nexport const App = () => {\n  const { lists, dispatch } = useAppState()\n  return (\n    <AppContainer>\n      {lists.map((list) => (\n        <Column text={list.text} key={list.id} id={list.id} />\n      ))}\n      <AddNewItem\n        toggleButtonText=\"+ Add another list\"\n        onAdd={text => dispatch(addList(text))}\n      />\n    </AppContainer>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport { AppStateProvider } from \"./state/AppStateContext\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppStateProvider>\n      <App />\n    </AppStateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}